{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template Creates an AIOPs 7.0 instance",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Speedy Credentials for the Moogsoft repo download"
          },
          "Parameters": [
            "UserName",
            "Password"
          ]
        },
        {
          "Label": {
            "default": "Moogsoft License Key"
          },
          "Parameters": [
            "License"
          ]
        },
        {
          "Label": {
            "default": "Local Database configuration"
          },
          "Parameters": [
            "DBpassword"
          ]
        },
        {
          "Label": {
            "default": "Instance configuration"
          },
          "Parameters": [
            "VpcId",
            "Subnets",
            "InstanceType",
            "KeyName",
            "SSHLocation"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "m4.xlarge",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "UserName": {
      "Description": "Speedy Credentials username",
      "Type": "String"
    },
    "Password": {
      "Description": "Speedy Credentials password",
      "Type": "String",
      "NoEcho": "true"
    },
    "License": {
      "Description": "Moogsoft License",
      "Type": "String"
    },
    "DBpassword": {
      "Description": "Local DB password",
      "Type": "String",
      "NoEcho": "true"
    }
  },
  "Resources": {
    "MoogsoftProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
         "Path": "/",
         "Roles": [ { "Ref": "MoogsoftRole" } ]
      }
    },
    "MoogsoftRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "sts:AssumeRole" ],
              "Principal": {"Service": "ec2.amazonaws.com"}
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "moogsoft_assume_role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid":    "VisualEditor0",
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Resource": "*"
                }
              ]
            } 
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess"
        ]
      },
    },
    "ServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "1"
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": "ami-6871a115",
        "IamInstanceProfile" : {
          "Ref" : "MoogsoftProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \n",
                "yum update -y \n",
                "yum install -y git wget \n",
                "cd /tmp \n",
                "git clone -b cloudwatch_integration https://github.com/cyenni/aws-moogsoft \n",
                "cd aws-moogsoft/ \n",
                "export MOOGARN=\"",
                {
                  "Fn::GetAtt": ["MoogsoftRole", "Arn"]
                },
                "\" \n",
                "export MOOGPASS=\"",
                {
                  "Ref": "Password"
                },
                "\" \n",
                "export MOOGUSER=\"",
                {
                  "Ref": "UserName"
                },
                "\" \n",
                "export MOOGLICENSE=\"",
                {
                  "Ref": "License"
                },
                "\" \n",
                "export MySQLPASS=\"",
                {
                  "Ref": "DBpassword"
                },
                "\" \n",
                "cp ./sshd_config /etc/ssh/sshd_config \n",
                "service sshd restart \n",
                "chmod 755 install.sh \n",
                "./install.sh \n",
                "cp ./moog_farmd.conf /usr/share/moogsoft/config \n",
                "chown moogsoft:moogsoft /usr/share/moogsoft/config/moog_farmd.conf \n",
                "chmod 644 /usr/share/moogsoft/config/moog_farmd.conf \n",
                "cp ./BotUtility.js /usr/share/moogsoft/contrib \n",
                "chown moogsoft:moogsoft /usr/share/moogsoft/contrib/BotUtility.js \n",
                "chmod 644 /usr/share/moogsoft/contrib/BotUtility.js \n",
                "cp ./SituationUtility.js /usr/share/moogsoft/contrib \n",
                "chown moogsoft:moogsoft /usr/share/moogsoft/contrib/SituationUtility.js \n",
                "chmod 644 /usr/share/moogsoft/contrib/SituationUtility.js \n",
                "cp ./SituationMgrLabeller.js /usr/share/moogsoft/bots/moobots \n",
                "chown moogsoft:moogsoft /usr/share/moogsoft/bots/moobots/SituationMgrLabeller.js \n",
                "chmod 755 /usr/share/moogsoft/bots/moobots/SituationMgrLabeller.js \n",
                "cp ./AwsLam.js /usr/share/moogsoft/bots/lambots \n",
                "chown moogsoft:moogsoft /usr/share/moogsoft/bots/lambots/AwsLam.js \n",
                "chmod 644 /usr/share/moogsoft/bots/lambots/AwsLam.js \n",
                "sed -i \"/role_arn/c\\role_arn : \\\"$MOOGARN\\\",\" /usr/share/moogsoft/config/aws_lam.conf \n",
                "service moogfarmd restart \n",
                "service awslamd restart \n",
                "chkconfig awslamd on \n"
              ]
            ]
          }
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    }
  }
}
